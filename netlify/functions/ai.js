// netlify/functions/ai.js
import fetch from "node-fetch";

export async function handler(event) {
  try {
    if (event.httpMethod !== "POST") {
      return { statusCode: 405, body: "Method Not Allowed" };
    }

    const { prompt = "", history = [] } = JSON.parse(event.body || "{}");

    // ---- V√âDELEM ----
    if (!process.env.OPENAI_API_KEY) {
      return { statusCode: 500, body: JSON.stringify({ reply: "Szerver be√°ll√≠t√°si hiba." }) };
    }

    // ---- √úZLETI SZAB√ÅLYOK / V√ÅLLALATI ADATOK ----
    const BIZ = {
      shipping: "Sz√°ll√≠t√°s: 1490 Ft, 30 000 Ft felett ingyenes.",
      payment: "Fizet√©s: jelenleg csak ut√°nv√©t.",
      contact: "+36 70 607 0675 ¬∑ info@szoke-epker.com ¬∑ 4100 Beretty√≥√∫jfalu, D√≥zsa Gy√∂rgy utca 6 1/3.",
      quoteRedirect: "√Årak t√∂bb t√©nyez≈ët≈ël f√ºggenek. K√©rj√ºk az #ajanlatkeres szekci√≥t haszn√°ld."
    };

    const system = `
Te a "Sz≈ëke √âpker KFT." r√∂vid, kedves √©s seg√≠t≈ëk√©sz √úZLETI asszisztense vagy.
- Nyelv: magyar, t√∂m√∂r √©s udvarias.
- T√©m√°k: szolg√°ltat√°sok, folyamat, kapcsolat, webshop, sz√°ll√≠t√°s, fizet√©s, √°raj√°nlat.
- Ha √°rra k√©rdeznek: magyar√°zd el, hogy t√∂bb t√©nyez≈ët≈ël f√ºgg, √©s ir√°ny√≠ts az #ajanlatkeres r√©szhez.
- Off-topic eset√©n: "√ârtem a k√©rd√©sed, de sajnos csak √ºzleti t√©m√°kban v√°laszolhatok üòö".
- Ne tal√°lj ki adatot; a sz√°ll√≠t√°s/fizet√©s/kapcsolat az al√°bbi BIZ adatokb√≥l j√∂jj√∂n.
- Adj r√∂vid, j√≥l olvashat√≥ v√°laszt. Lehet≈ëleg javasolj k√∂vetkez≈ë l√©p√©st (CTA).
`;

    // A kliens r√∂vid HISTORY-t k√ºld ‚Äì itt limit√°ljuk is:
    const shortHistory = history.slice(-6);

    // ---- PROMPT √ñSSZE√ÅLL√çT√ÅS ----
    const userMsg = `
Felhaszn√°l√≥i k√©rd√©s: "${prompt}"

C√©gadatok (BIZ):
- ${BIZ.shipping}
- ${BIZ.payment}
- Kapcsolat: ${BIZ.contact}
- √Åraj√°nlat: ${BIZ.quoteRedirect}

V√°laszform√°tum (JSON):
{
  "reply": "r√∂vid magyar v√°lasz",
  "quick_replies": ["opcion√°lis", "max 4 r√∂vid gombsz√∂veg"]
}

Ha off-topic: v√°laszold a guardrail mondatot √©s adj quick reply-t: ["Szolg√°ltat√°sok","Aj√°nlatk√©r√©s","Kapcsolat"].
`;

    // ---- OPENAI H√çV√ÅS (Chat Completions) ----
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        temperature: 0.3,
        messages: [
          { role: "system", content: system.trim() },
          ...shortHistory,
          { role: "user", content: userMsg.trim() }
        ],
        response_format: { type: "json_object" }
      })
    });

    if (!resp.ok) {
      const t = await resp.text();
      console.error("OpenAI error:", t);
      return {
        statusCode: 200,
        body: JSON.stringify({
          reply: "Sajn√°lom, most nem √©rem el a v√°laszmotort. K√∂zben seg√≠thetek: " + BIZ.contact,
          quick_replies: ["Szolg√°ltat√°sok","Sz√°ll√≠t√°s","Fizet√©s","Aj√°nlatk√©r√©s"]
        })
      };
    }

    const data = await resp.json();
    let parsed;
    try {
      parsed = JSON.parse(data.choices?.[0]?.message?.content || "{}");
    } catch {
      parsed = {};
    }

    // Biztons√°gi alap√©rtelmez√©s
    const reply = parsed.reply || "Rendben. Miben seg√≠thetek?";
    const quick = Array.isArray(parsed.quick_replies) ? parsed.quick_replies.slice(0,4) : [];

    return {
      statusCode: 200,
      body: JSON.stringify({ reply, quick_replies: quick })
    };
  } catch (e) {
    console.error(e);
    return {
      statusCode: 200,
      body: JSON.stringify({
        reply: "V√°ratlan hiba t√∂rt√©nt. √çrj nyugodtan az el√©rhet≈ës√©geinkre: " +
               "+36 70 607 0675 ¬∑ info@szoke-epker.com",
        quick_replies: ["Szolg√°ltat√°sok","Sz√°ll√≠t√°s","Fizet√©s","Aj√°nlatk√©r√©s"]
      })
    };
  }
}
